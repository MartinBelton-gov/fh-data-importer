@page "/imports"
@using FamilyHub.DataImporter.Web.Data
@using static PluginBase.BaseMapper
@inject DataImportApiService ImportApiService

<h1>Data Imports</h1>

<p>Select the imports That you want to run.</p>

@if (importTypes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Supplier</th>
                <th>Start</th>
                <th>Stop</th>
                <th>Progress</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var importType in importTypes)
            {
                <tr>
                    <td>@importType.Name</td>
                    <td>@importType.Supplier</td>
                    <td><button class="btn btn-primary" disabled="@IsStartDisabled(importType.Name)" @onclick="@(e => StartProcess(importType.Name))">Start</button></td>
                    <td><button class="btn btn-primary" disabled="@IsStopDisabled(importType.Name)" @onclick="@(e => StopProcess(importType.Name))">Stop</button></td>
                    <td>@GetProgress(importType.Name)</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ImportType[]? importTypes;
    public Dictionary<string, string> Progress = new Dictionary<string, string>();



    protected override async Task OnInitializedAsync()
    {
        importTypes = await ImportApiService.GetDataImportsAsync();
    }

    private void StartProcess(string name)
    {
        UpdateProgress updateProgress = new UpdateProgress(ShowProgress);
        var taskitem = ImportApiService.StartImport(name, updateProgress, this);
        InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }

    public async Task StatusChanged()
    {
        await InvokeAsync(StateHasChanged);
    }

    private void StopProcess(string name)
    {
        ImportApiService.StopImport(name);
    }

    private bool IsStartDisabled(string name)
    {
        return ImportApiService.IsTaskRunning(name);
    }

    private bool IsStopDisabled(string name)
    {
        return !ImportApiService.IsTaskRunning(name);
    }

    private string GetProgress(string name)
    {
        if (Progress.ContainsKey(name))
            return Progress[name];

        return string.Empty;
    }

    public void ShowProgress(string name, string message)
    {
        if (!Progress.ContainsKey(name))
        {
            Progress.Add(name,message);
        }
        else
        {
            Progress[name] = message;
        }

        InvokeAsync(StateHasChanged).ConfigureAwait(false);
    }
}




